#pragma once

namespace std
{
    /**
     * This is a C++11 compliant implementation of the C++17 optional
     * defined at https://en.cppreference.com/w/cpp/utility/optional
     */
    template<typename T>
    class optional {
    private:
        T _val{};
        bool _is_set = false;
    public:
        optional() : _is_set(false) {}
        optional(const T& val)
        : _val(val), _is_set(true) {}

        bool has_value() { return _is_set; }
        explicit operator bool() const { return _is_set; }

        T value() const { return _val; }

        void reset() { _is_set = false; }

        optional operator=(const T& val) {
            _val = val;
            _is_set = true;
            return *this;
        }
    };
}

/**
 * MIT License
 * 
 * Copyright (c) 2021 UWA-CITS5506-Gp01
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

namespace std
{
    /**
     * This is a C++11 compliant implementation of the C++17 optional
     * defined at https://en.cppreference.com/w/cpp/utility/optional
     */
    template<typename T>
    class optional {
    private:
        T _val{};
        bool _is_set = false;
    public:
        optional() : _is_set(false) {}
        optional(const T& val)
        : _val(val), _is_set(true) {}

        bool has_value() const { return _is_set; }
        explicit operator bool() const { return _is_set; }

        T value() const { return _val; }

        void reset() { _is_set = false; }

        optional operator=(const T& val) {
            _val = val;
            _is_set = true;
            return *this;
        }
    };
}
